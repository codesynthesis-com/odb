This example shows how to persist objects that use Qt smart pointers,
containers, and value types with the help of the Qt profile library
(libodb-qt).

The example consists of the following files:

employee.hxx
  Header file defining the 'employee' and 'employer' persistent classes.
  We use QSharedPointer/QWeakPointer smart pointers provided by Qt (as
  well as their lazy versions provided by the Qt profile library) to
  establish a bidirectional employee-employer relationship. The QList
  type is used to store the collection of employees employed by the
  employer. We also use the QDateTime type to store the employee's date
  of birth and QString to store the employee's first and last name. A
  QSet instance keeps track of the employee's email addresses. Finally
  we use QByteArray to store the person's public key.

employee-odb.hxx
employee-odb.ixx
employee-odb.cxx
employee.sql
  The first three files contain the database support code and the last file
  contains the database schema for the employee.hxx header.

  These files are generated by the ODB compiler from employee.hxx using the
  following command line:

  odb -d <database> -p qt --generate-schema --generate-query employee.hxx

  Where <database> stands for the database system we are using, for example,
  'mysql'.

  The -p option is used to instruct the ODB compiler to load the Qt
  profile.

database.hxx
  Contains the create_database() function which instantiates the concrete
  database class corresponding to the database system we are using.

driver.cxx
  Driver for the example. It includes the employee.hxx and employee-odb.hxx
  headers to gain access to the persistent classes and their database support
  code. It also includes database.hxx for the create_database() function
  declaration.

  In main() the driver first calls create_database() to obtain the database
  instance. It then creates a number of 'employee' and 'employer' objects and
  persists them in the database. The next transaction loads all the employees
  of a particular employer using the employee-employer relationship. Finally,
  the driver performs a database query which uses a data member of the Qt
  QString type in its criterion.

To run the example we first need to create the database schema. Using MySQL
as an example, this can be achieved with the following command:

mysql --user=odb_test --database=odb_test < employee.sql

Here we use 'odb_test' as the database login and also 'odb_test' as the
database name.

Once the database schema is ready, we can run the example (using MySQL as
the database):

./driver --user odb_test --database odb_test
