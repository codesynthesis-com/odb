# file      : odb/mysql/buildfile
# license   : GNU GPL v2; see accompanying LICENSE file

define cli: file
cli{*}: extension = cli

import int_libs = libodb%lib{odb}

import int_libs += ($client_lib == 'mysql'            \
                    ? libmysqlclient%lib{mysqlclient} \
                    : libmariadb%lib{mariadb})

lib{odb-mysql}: {hxx ixx txx cxx}{* -version} {hxx}{version} \
        details/{hxx ixx txx cxx}{* -options}                \
                $int_libs

# Include the generated version header into the distribution (so that we don't
# pick up an installed one) and don't remove it when cleaning in src (so that
# clean results in a state identical to distributed).
#
hxx{version}: in{version} $src_root/manifest
hxx{version}:
{
  dist  = true
  clean = ($src_root != $out_root)
}

# Build options.
#
cxx.poptions =+ "-I$out_root" "-I$src_root"

if ($client_lib == 'mariadb')
  cxx.poptions += -DLIBODB_MYSQL_MARIADB

obja{*}: cxx.poptions += -DLIBODB_MYSQL_STATIC_BUILD
objs{*}: cxx.poptions += -DLIBODB_MYSQL_SHARED_BUILD

# Export options.
#
lib{odb-mysql}:
{
  cxx.export.poptions = "-I$out_root" "-I$src_root"
  cxx.export.libs = $int_libs
}

if ($client_lib == 'mariadb')
  lib{odb-mysql}: cxx.export.poptions += -DLIBODB_MYSQL_MARIADB

liba{odb-mysql}: cxx.export.poptions += -DLIBODB_MYSQL_STATIC
libs{odb-mysql}: cxx.export.poptions += -DLIBODB_MYSQL_SHARED

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{odb-mysql}: bin.lib.version = @"-$version.project_id"
else
  lib{odb-mysql}: bin.lib.version = @"-$version.major.$version.minor"

develop = $config.libodb_mysql.develop

## Consumption build ($develop == false).
#

# Use pregenerated versions in the consumption build.
#
lib{odb-mysql}: details/pregenerated/{hxx ixx cxx}{**}: include = (!$develop)

if! $develop
  cxx.poptions =+ "-I($src_base/details/pregenerated)" # Note: must come first.

# Don't install pregenerated headers since they are only used internally in
# the database implementation (also below).
#
details/pregenerated/{hxx ixx}{*}: install = false

# Distribute pregenerated versions only in the consumption build.
#
details/pregenerated/{hxx ixx cxx}{*}: dist = (!$develop)

#
##


## Development build ($develop == true).
#

lib{odb-mysql}: details/{hxx ixx cxx}{options}: include = $develop

if $develop
  import! [metadata] cli = cli%exe{cli}

# In the development build distribute regenerated {hxx ixx cxx}{options},
# remapping their locations to the paths of the pregenerated versions (which
# are only distributed in the consumption build; see above). This way we make
# sure that the distributed files are always up-to-date.
#
<details/{hxx ixx cxx}{options}>: details/cli{options} $cli
{
  install = false
  dist    = ($develop ? pregenerated/odb/mysql/details/ : false)

  # Symlink the generated code in src for convenience of development.
  #
  backlink = true
}
%
if $develop
{{
  options = --include-with-brackets --include-prefix odb/mysql/details  \
            --guard-prefix LIBODB_MYSQL_DETAILS --generate-file-scanner \
            --cli-namespace odb::mysql::details::cli --long-usage       \
            --generate-specifier --no-combined-flags

  $cli $options -o $out_base/details/ $path($<[0])

  # If the result differs from the pregenerated version, copy it over.
  #
  d = [dir_path] $src_base/details/pregenerated/odb/mysql/details/

  if diff $d/options.hxx $path($>[0]) >- && \
     diff $d/options.ixx $path($>[1]) >- && \
     diff $d/options.cxx $path($>[2]) >-
    exit
  end

  cp $path($>[0]) $d/options.hxx
  cp $path($>[1]) $d/options.ixx
  cp $path($>[2]) $d/options.cxx
}}

# Install into the odb/mysql/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
install_include = [dir_path] include/odb/mysql/

{hxx ixx txx}{*}:
{
  install         = $install_include
  install.subdirs = true
}
