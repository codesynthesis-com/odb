: 1
name: libodb-pgsql
version: 2.5.0
project: odb
summary: PostgreSQL ODB runtime library
license: GPL-2.0-only
license: other: proprietary ; Not free/open source.
topics: C++, ORM, PostgreSQL, SQL
description-file: README.md
package-description-file: PACKAGE-README.md
changes-file: NEWS
url: https://www.codesynthesis.com/products/odb/
doc-url: https://www.codesynthesis.com/products/odb/doc/manual.xhtml
src-url: https://git.codesynthesis.com/cgit/odb/odb/
email: odb-users@codesynthesis.com
build-warning-email: odb-builds@codesynthesis.com
requires: c++11
depends: * build2 >= 0.17.0
depends: * bpkg >= 0.17.0

depends: libpq >= 7.4.0
depends: psql >= 7.4.0 ? ($config.libodb_pgsql.psql)
depends: libodb == $
depends: * cli ^1.2.0 ? ($config.libodb_pgsql.develop)

tests: odb-tests == $ \
  ? (!$defined(config.odb_tests.database)) config.odb_tests.database=pgsql

examples: odb-examples == $ \
  ? (!$defined(config.odb_examples.database)) config.odb_examples.database=pgsql

# Note: common for all the build configurations.
#
build-auxiliary: *-postgresql_*

default-builds: all
default-builds: -wasm
default-build-config:
\
{
  config.odb_tests.pgsql.user=$getenv(DATABASE_USER)
  config.odb_tests.pgsql.database=$getenv(DATABASE_NAME)
  config.odb_tests.pgsql.host=$getenv(DATABASE_HOST)
  config.odb_tests.pgsql.port=$getenv(DATABASE_PORT)
}+ odb-tests

{
  config.odb_examples.pgsql.user=$getenv(DATABASE_USER)
  config.odb_examples.pgsql.database=$getenv(DATABASE_NAME)
  config.odb_examples.pgsql.host=$getenv(DATABASE_HOST)
  config.odb_examples.pgsql.port=$getenv(DATABASE_PORT)
}+ odb-examples

# Configure odb-{tests,examples} packages' dependencies libodb and libpq as
# system on the bpkg.test-separate-installed.configure.build step, since they
# are already installed as dependencies of libodb-pqsql.
#
{
  --config-uuid=00000000-0000-0000-0000-000000000005
}+ { ?sys:libodb/* ?sys:libpq/* }
\

# Only build this package configuration where it can be tested via odb-tests
# package (see its manifest for details).
#
multi-builds: all
multi-builds: -wasm
multi-builds: -( +windows -gcc ) ; Requires MinGW GCC.
multi-builds: &gcc               ; Requires GCC with plugin support enabled.
multi-builds: &gcc-5+            ; Requires GCC 5 or later.
multi-builds: -static            ; Implementation uses plugins and requires -fPIC.
multi-build-config:
\
{
  config.odb_tests.multi_database=true

  config.odb_tests.pgsql.user=$getenv(DATABASE_USER)
  config.odb_tests.pgsql.database=$getenv(DATABASE_NAME)
  config.odb_tests.pgsql.host=$getenv(DATABASE_HOST)
  config.odb_tests.pgsql.port=$getenv(DATABASE_PORT)
}+ odb-tests

{
  --config-uuid=00000000-0000-0000-0000-000000000005
}+ { ?sys:libodb/* ?sys:libpq/* }
\

# Complements the default configuration (see odb-{tests,examples} for
# background).
#
custom-builds: default ; Requires default config with GCC as host compiler.
custom-builds: -wasm
custom-builds: -static ; Implementation uses plugins and requires -fPIC.
#custom-build-bot: -- see below.
custom-build-config:
\
{
  config.odb_tests.pgsql.user=$getenv(DATABASE_USER)
  config.odb_tests.pgsql.database=$getenv(DATABASE_NAME)
  config.odb_tests.pgsql.host=$getenv(DATABASE_HOST)
  config.odb_tests.pgsql.port=$getenv(DATABASE_PORT)
}+ odb-tests

{
  config.odb_examples.pgsql.user=$getenv(DATABASE_USER)
  config.odb_examples.pgsql.database=$getenv(DATABASE_NAME)
  config.odb_examples.pgsql.host=$getenv(DATABASE_HOST)
  config.odb_examples.pgsql.port=$getenv(DATABASE_PORT)
}+ odb-examples

{
  --config-uuid=00000000-0000-0000-0000-000000000005
}+ { ?sys:libodb/* ?sys:libpq/* }
\

# Complements the multi configuration (see odb-tests for background).
#
custom-multi-builds: default ; Requires default config with GCC as host compiler.
custom-multi-builds: -wasm
custom-multi-builds: -static ; Implementation uses plugins and requires -fPIC.
#custom-multi-build-bot: -- see below.
custom-multi-build-config:
\
{
  config.odb_tests.multi_database=true

  config.odb_tests.pgsql.user=$getenv(DATABASE_USER)
  config.odb_tests.pgsql.database=$getenv(DATABASE_NAME)
  config.odb_tests.pgsql.host=$getenv(DATABASE_HOST)
  config.odb_tests.pgsql.port=$getenv(DATABASE_PORT)
}+ odb-tests

{
  --config-uuid=00000000-0000-0000-0000-000000000005
}+ { ?sys:libodb/* ?sys:libpq/* }
\

# Only build the {boost,qt5,qt6}-default package configurations where they can
# be tested via odb-{tests,examples} packages (see their manifest for
# details).
#
boost-default-builds: default
boost-default-builds: -wasm
boost-default-builds: -( +windows -gcc ) ; Requires MinGW GCC.
boost-default-builds: &gcc               ; Requires GCC with plugin support enabled.
boost-default-builds: &gcc-5+            ; Requires GCC 5 or later.
boost-default-builds: -static            ; Implementation uses plugins and requires -fPIC.
boost-default-builds: -( +macos &gcc )   ; Not supported by libboost-*.
boost-default-build-config:
\
{
  config.odb_tests.boost=true

  config.odb_tests.pgsql.user=$getenv(DATABASE_USER)
  config.odb_tests.pgsql.database=$getenv(DATABASE_NAME)
  config.odb_tests.pgsql.host=$getenv(DATABASE_HOST)
  config.odb_tests.pgsql.port=$getenv(DATABASE_PORT)
}+ odb-tests

{
  config.odb_examples.boost=true

  config.odb_examples.pgsql.user=$getenv(DATABASE_USER)
  config.odb_examples.pgsql.database=$getenv(DATABASE_NAME)
  config.odb_examples.pgsql.host=$getenv(DATABASE_HOST)
  config.odb_examples.pgsql.port=$getenv(DATABASE_PORT)
}+ odb-examples

{
  --config-uuid=00000000-0000-0000-0000-000000000005
}+ { ?sys:libodb/* ?sys:libpq/* }
\

qt5-default-builds: default
qt5-default-builds: -wasm
qt5-default-builds: -( +windows -gcc ) ; Requires MinGW GCC.
qt5-default-builds: &gcc               ; Requires GCC with plugin support enabled.
qt5-default-builds: &gcc-5+            ; Requires GCC 5 or later.
qt5-default-builds: -static            ; Implementation uses plugins and requires -fPIC.
qt5-default-builds: -( +macos &gcc )   ; Not supported by libQt5Core.
qt5-default-build-config:
\
{
  config.odb_tests.qt=5

  config.odb_tests.pgsql.user=$getenv(DATABASE_USER)
  config.odb_tests.pgsql.database=$getenv(DATABASE_NAME)
  config.odb_tests.pgsql.host=$getenv(DATABASE_HOST)
  config.odb_tests.pgsql.port=$getenv(DATABASE_PORT)
}+ odb-tests

{
  config.odb_examples.qt=5

  config.odb_examples.pgsql.user=$getenv(DATABASE_USER)
  config.odb_examples.pgsql.database=$getenv(DATABASE_NAME)
  config.odb_examples.pgsql.host=$getenv(DATABASE_HOST)
  config.odb_examples.pgsql.port=$getenv(DATABASE_PORT)
}+ odb-examples

{
  --config-uuid=00000000-0000-0000-0000-000000000005
}+ { ?sys:libodb/* ?sys:libpq/* }
\

qt6-default-builds: default
qt6-default-builds: -wasm
qt6-default-builds: -( +windows -gcc ) ; Requires MinGW GCC.
qt6-default-builds: &gcc               ; Requires GCC with plugin support enabled.
qt6-default-builds: &gcc-5+            ; Requires GCC 5 or later.
qt6-default-builds: -static            ; Implementation uses plugins and requires -fPIC.
qt6-default-builds: -( +macos &gcc )   ; Not supported by libQt6Core.
qt6-default-build-config:
\
{
  config.odb_tests.qt=6

  config.odb_tests.pgsql.user=$getenv(DATABASE_USER)
  config.odb_tests.pgsql.database=$getenv(DATABASE_NAME)
  config.odb_tests.pgsql.host=$getenv(DATABASE_HOST)
  config.odb_tests.pgsql.port=$getenv(DATABASE_PORT)
}+ odb-tests

{
  config.odb_examples.qt=6

  config.odb_examples.pgsql.user=$getenv(DATABASE_USER)
  config.odb_examples.pgsql.database=$getenv(DATABASE_NAME)
  config.odb_examples.pgsql.host=$getenv(DATABASE_HOST)
  config.odb_examples.pgsql.port=$getenv(DATABASE_PORT)
}+ odb-examples

{
  --config-uuid=00000000-0000-0000-0000-000000000005
}+ { ?sys:libodb/* ?sys:libpq/* }
\

# The {boost,qt5,qt6}-custom configurations complement the
# {boost,qt5,qt6}-default configurations (see odb-{tests,examples} for
# background).
#
boost-custom-builds: default ; Requires default config with GCC as host compiler.
boost-custom-builds: -wasm
boost-custom-builds: -static ; Implementation uses plugins and requires -fPIC.
boost-custom-builds: -( +macos &gcc ) ; Not supported by libboost-*.
#boost-custom-build-bot: -- see below.
boost-custom-build-config:
\
{
  config.odb_tests.boost=true

  config.odb_tests.pgsql.user=$getenv(DATABASE_USER)
  config.odb_tests.pgsql.database=$getenv(DATABASE_NAME)
  config.odb_tests.pgsql.host=$getenv(DATABASE_HOST)
  config.odb_tests.pgsql.port=$getenv(DATABASE_PORT)
}+ odb-tests

{
  config.odb_examples.boost=true

  config.odb_examples.pgsql.user=$getenv(DATABASE_USER)
  config.odb_examples.pgsql.database=$getenv(DATABASE_NAME)
  config.odb_examples.pgsql.host=$getenv(DATABASE_HOST)
  config.odb_examples.pgsql.port=$getenv(DATABASE_PORT)
}+ odb-examples

{
  --config-uuid=00000000-0000-0000-0000-000000000005
}+ { ?sys:libodb/* ?sys:libpq/* }
\

qt5-custom-builds: default ; Requires default config with GCC as host compiler.
qt5-custom-builds: -wasm
qt5-custom-builds: -static ; Implementation uses plugins and requires -fPIC.
qt5-custom-builds: -( +macos &gcc ) ; Not supported by libQt5Core.
#qt5-custom-build-bot: -- see below.
qt5-custom-build-config:
\
{
  config.odb_tests.qt=5

  config.odb_tests.pgsql.user=$getenv(DATABASE_USER)
  config.odb_tests.pgsql.database=$getenv(DATABASE_NAME)
  config.odb_tests.pgsql.host=$getenv(DATABASE_HOST)
  config.odb_tests.pgsql.port=$getenv(DATABASE_PORT)
}+ odb-tests

{
  config.odb_examples.qt=5

  config.odb_examples.pgsql.user=$getenv(DATABASE_USER)
  config.odb_examples.pgsql.database=$getenv(DATABASE_NAME)
  config.odb_examples.pgsql.host=$getenv(DATABASE_HOST)
  config.odb_examples.pgsql.port=$getenv(DATABASE_PORT)
}+ odb-examples

{
  --config-uuid=00000000-0000-0000-0000-000000000005
}+ { ?sys:libodb/* ?sys:libpq/* }
\

qt6-custom-builds: default ; Requires default config with GCC as host compiler.
qt6-custom-builds: -wasm
qt6-custom-builds: -static ; Implementation uses plugins and requires -fPIC.
qt6-custom-builds: -( +macos &gcc ) ; Not supported by libQt6Core.
#qt6-custom-build-bot: -- see below.
qt6-custom-build-config:
\
{
  config.odb_tests.qt=6

  config.odb_tests.pgsql.user=$getenv(DATABASE_USER)
  config.odb_tests.pgsql.database=$getenv(DATABASE_NAME)
  config.odb_tests.pgsql.host=$getenv(DATABASE_HOST)
  config.odb_tests.pgsql.port=$getenv(DATABASE_PORT)
}+ odb-tests

{
  config.odb_examples.qt=6

  config.odb_examples.pgsql.user=$getenv(DATABASE_USER)
  config.odb_examples.pgsql.database=$getenv(DATABASE_NAME)
  config.odb_examples.pgsql.host=$getenv(DATABASE_HOST)
  config.odb_examples.pgsql.port=$getenv(DATABASE_PORT)
}+ odb-examples

{
  --config-uuid=00000000-0000-0000-0000-000000000005
}+ { ?sys:libodb/* ?sys:libpq/* }
\

custom-build-bot:
\
-----BEGIN PUBLIC KEY-----
MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAuF4YmJmPHY52Q6N+YO0M
lt/fCovdezleb2tVplyTnvbyAiPdmYCIIjVrsqUn3y46PdFtWEiSdsrCcncoxi6H
8KelOB/oQ9pNTyEvwGKEH5ZIU7noLZYdXEfoNdvdL/pbY/7uLBZOSekfdQShZtbe
uOZCM2Mhg2DD76TP/VAwaXuDCnEvxxU/yneUl5ZaBo62AWNrYJuSGAliCOpVpl6X
X1kbHOvnCx7c9e3LxgaVivPaeZRKYg0OaFt96SBYEZzNPvjA8pMuKuj/vatHaCQ3
NO9+r3TJ+4dQd7qN6Ju3zUJq9J/ndSh4lPvUalvvhdykecefhcyHwRZOG4xyFMFE
nJM4sM+aZu6WoKATIKtk7On70inVr0sZJXwJ4Lt4oqaK2VthcSTby3wf2Yv4p5hL
zNo31cCPmBRYzABcIc6ADYvexVK4uCwaim8xs7RK5Ug2Gv6vUWoRNZW8grIgDwUY
5pZ4Zk3hW4ii2vehTaVrrmdW6XipIsT+ayiVX7eWuHHNxAeCojXVjOJu9B0ExMlD
5tHZCs+SNdV5MceexecbptB7fZtRebP120yjLiSnZ5FpaQ1stusr0hSg+VQaX4np
f5m1W/CcDr53PKWg/ayY9nWMUQaIwH4b69kLM+VTpYSbzu5UQJkmNBNq2EOHgoTv
9MLA+cE/nNJ/rMI//MZ1+kcCAwEAAQ==
-----END PUBLIC KEY-----
\

custom-multi-build-bot:
\
-----BEGIN PUBLIC KEY-----
MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAuF4YmJmPHY52Q6N+YO0M
lt/fCovdezleb2tVplyTnvbyAiPdmYCIIjVrsqUn3y46PdFtWEiSdsrCcncoxi6H
8KelOB/oQ9pNTyEvwGKEH5ZIU7noLZYdXEfoNdvdL/pbY/7uLBZOSekfdQShZtbe
uOZCM2Mhg2DD76TP/VAwaXuDCnEvxxU/yneUl5ZaBo62AWNrYJuSGAliCOpVpl6X
X1kbHOvnCx7c9e3LxgaVivPaeZRKYg0OaFt96SBYEZzNPvjA8pMuKuj/vatHaCQ3
NO9+r3TJ+4dQd7qN6Ju3zUJq9J/ndSh4lPvUalvvhdykecefhcyHwRZOG4xyFMFE
nJM4sM+aZu6WoKATIKtk7On70inVr0sZJXwJ4Lt4oqaK2VthcSTby3wf2Yv4p5hL
zNo31cCPmBRYzABcIc6ADYvexVK4uCwaim8xs7RK5Ug2Gv6vUWoRNZW8grIgDwUY
5pZ4Zk3hW4ii2vehTaVrrmdW6XipIsT+ayiVX7eWuHHNxAeCojXVjOJu9B0ExMlD
5tHZCs+SNdV5MceexecbptB7fZtRebP120yjLiSnZ5FpaQ1stusr0hSg+VQaX4np
f5m1W/CcDr53PKWg/ayY9nWMUQaIwH4b69kLM+VTpYSbzu5UQJkmNBNq2EOHgoTv
9MLA+cE/nNJ/rMI//MZ1+kcCAwEAAQ==
-----END PUBLIC KEY-----
\

boost-custom-build-bot:
\
-----BEGIN PUBLIC KEY-----
MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAuF4YmJmPHY52Q6N+YO0M
lt/fCovdezleb2tVplyTnvbyAiPdmYCIIjVrsqUn3y46PdFtWEiSdsrCcncoxi6H
8KelOB/oQ9pNTyEvwGKEH5ZIU7noLZYdXEfoNdvdL/pbY/7uLBZOSekfdQShZtbe
uOZCM2Mhg2DD76TP/VAwaXuDCnEvxxU/yneUl5ZaBo62AWNrYJuSGAliCOpVpl6X
X1kbHOvnCx7c9e3LxgaVivPaeZRKYg0OaFt96SBYEZzNPvjA8pMuKuj/vatHaCQ3
NO9+r3TJ+4dQd7qN6Ju3zUJq9J/ndSh4lPvUalvvhdykecefhcyHwRZOG4xyFMFE
nJM4sM+aZu6WoKATIKtk7On70inVr0sZJXwJ4Lt4oqaK2VthcSTby3wf2Yv4p5hL
zNo31cCPmBRYzABcIc6ADYvexVK4uCwaim8xs7RK5Ug2Gv6vUWoRNZW8grIgDwUY
5pZ4Zk3hW4ii2vehTaVrrmdW6XipIsT+ayiVX7eWuHHNxAeCojXVjOJu9B0ExMlD
5tHZCs+SNdV5MceexecbptB7fZtRebP120yjLiSnZ5FpaQ1stusr0hSg+VQaX4np
f5m1W/CcDr53PKWg/ayY9nWMUQaIwH4b69kLM+VTpYSbzu5UQJkmNBNq2EOHgoTv
9MLA+cE/nNJ/rMI//MZ1+kcCAwEAAQ==
-----END PUBLIC KEY-----
\

qt5-custom-build-bot:
\
-----BEGIN PUBLIC KEY-----
MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAuF4YmJmPHY52Q6N+YO0M
lt/fCovdezleb2tVplyTnvbyAiPdmYCIIjVrsqUn3y46PdFtWEiSdsrCcncoxi6H
8KelOB/oQ9pNTyEvwGKEH5ZIU7noLZYdXEfoNdvdL/pbY/7uLBZOSekfdQShZtbe
uOZCM2Mhg2DD76TP/VAwaXuDCnEvxxU/yneUl5ZaBo62AWNrYJuSGAliCOpVpl6X
X1kbHOvnCx7c9e3LxgaVivPaeZRKYg0OaFt96SBYEZzNPvjA8pMuKuj/vatHaCQ3
NO9+r3TJ+4dQd7qN6Ju3zUJq9J/ndSh4lPvUalvvhdykecefhcyHwRZOG4xyFMFE
nJM4sM+aZu6WoKATIKtk7On70inVr0sZJXwJ4Lt4oqaK2VthcSTby3wf2Yv4p5hL
zNo31cCPmBRYzABcIc6ADYvexVK4uCwaim8xs7RK5Ug2Gv6vUWoRNZW8grIgDwUY
5pZ4Zk3hW4ii2vehTaVrrmdW6XipIsT+ayiVX7eWuHHNxAeCojXVjOJu9B0ExMlD
5tHZCs+SNdV5MceexecbptB7fZtRebP120yjLiSnZ5FpaQ1stusr0hSg+VQaX4np
f5m1W/CcDr53PKWg/ayY9nWMUQaIwH4b69kLM+VTpYSbzu5UQJkmNBNq2EOHgoTv
9MLA+cE/nNJ/rMI//MZ1+kcCAwEAAQ==
-----END PUBLIC KEY-----
\

qt6-custom-build-bot:
\
-----BEGIN PUBLIC KEY-----
MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAuF4YmJmPHY52Q6N+YO0M
lt/fCovdezleb2tVplyTnvbyAiPdmYCIIjVrsqUn3y46PdFtWEiSdsrCcncoxi6H
8KelOB/oQ9pNTyEvwGKEH5ZIU7noLZYdXEfoNdvdL/pbY/7uLBZOSekfdQShZtbe
uOZCM2Mhg2DD76TP/VAwaXuDCnEvxxU/yneUl5ZaBo62AWNrYJuSGAliCOpVpl6X
X1kbHOvnCx7c9e3LxgaVivPaeZRKYg0OaFt96SBYEZzNPvjA8pMuKuj/vatHaCQ3
NO9+r3TJ+4dQd7qN6Ju3zUJq9J/ndSh4lPvUalvvhdykecefhcyHwRZOG4xyFMFE
nJM4sM+aZu6WoKATIKtk7On70inVr0sZJXwJ4Lt4oqaK2VthcSTby3wf2Yv4p5hL
zNo31cCPmBRYzABcIc6ADYvexVK4uCwaim8xs7RK5Ug2Gv6vUWoRNZW8grIgDwUY
5pZ4Zk3hW4ii2vehTaVrrmdW6XipIsT+ayiVX7eWuHHNxAeCojXVjOJu9B0ExMlD
5tHZCs+SNdV5MceexecbptB7fZtRebP120yjLiSnZ5FpaQ1stusr0hSg+VQaX4np
f5m1W/CcDr53PKWg/ayY9nWMUQaIwH4b69kLM+VTpYSbzu5UQJkmNBNq2EOHgoTv
9MLA+cE/nNJ/rMI//MZ1+kcCAwEAAQ==
-----END PUBLIC KEY-----
\

# Binary distribution packages. Overall notes:
#
# - Build as C++11 for maximum compatibility (this is a C++11 codebase).

bindist-debian-builds: bindist
bindist-debian-build-include: linux_debian*-**
bindist-debian-build-include: linux_ubuntu*-**
bindist-debian-build-exclude: **
bindist-debian-build-config:
\
+bpkg.bindist.debian:
+bbot.bindist.upload:
b.create:config.cxx.std=c++11
?sys:libpq
?sys:psql

{
  config.odb_tests.pgsql.user=$getenv(DATABASE_USER)
  config.odb_tests.pgsql.database=$getenv(DATABASE_NAME)
  config.odb_tests.pgsql.host=$getenv(DATABASE_HOST)
  config.odb_tests.pgsql.port=$getenv(DATABASE_PORT)
}+ odb-tests

{
  config.odb_examples.pgsql.user=$getenv(DATABASE_USER)
  config.odb_examples.pgsql.database=$getenv(DATABASE_NAME)
  config.odb_examples.pgsql.host=$getenv(DATABASE_HOST)
  config.odb_examples.pgsql.port=$getenv(DATABASE_PORT)
}+ odb-examples

{ --config-uuid=00000000-0000-0000-0000-000000000005 }+ ?sys:libodb/*
\

bindist-fedora-builds: bindist
bindist-fedora-build-include: linux_fedora*-**
bindist-fedora-build-include: linux_rhel*-**
bindist-fedora-build-exclude: **
bindist-fedora-build-config:
\
+bpkg.bindist.fedora:
+bbot.bindist.upload:
b.create:config.cxx.std=c++11
?sys:libpq
?sys:psql

{
  config.odb_tests.pgsql.user=$getenv(DATABASE_USER)
  config.odb_tests.pgsql.database=$getenv(DATABASE_NAME)
  config.odb_tests.pgsql.host=$getenv(DATABASE_HOST)
  config.odb_tests.pgsql.port=$getenv(DATABASE_PORT)
}+ odb-tests

{
  config.odb_examples.pgsql.user=$getenv(DATABASE_USER)
  config.odb_examples.pgsql.database=$getenv(DATABASE_NAME)
  config.odb_examples.pgsql.host=$getenv(DATABASE_HOST)
  config.odb_examples.pgsql.port=$getenv(DATABASE_PORT)
}+ odb-examples

{ --config-uuid=00000000-0000-0000-0000-000000000005 }+ ?sys:libodb/*
\

# Windows binary distribution archives (release and debug).
#
# - Bundle the dependencies (libpq, etc) with --recursive=full, so that if the
#   user needs to link any of these libraries directly, they can use their
#   bundled versions, compatible with libodb-pgsql.
#
# - Also bundle the database client program so that the user can use it, if
#   they need to. Only for release.
#
# - Don't bundle libodb since it is packaged separately.
#
# - For Debug we only produce the shared library (if we wanted to also do
#   static, then would need to use /Z7), adding the `D` suffix to the library
#   name.
#
bindist-windows-release-builds: bindist
bindist-windows-release-build-include: windows*-msvc**
bindist-windows-release-build-exclude: **
#bindist-windows-release-build-bot: -- see below.
bindist-windows-release-build-config:
\
+bpkg.bindist.archive:
+bbot.bindist.upload:
bpkg.bindist.archive:--recursive=full
bpkg.bindist.archive:--recursive=?libodb=separate

# Relocatable by default (see target configuration for details).
#
#bpkg.bindist.archive:config.install.relocatable=true

b.create:config.cc.coptions="/W2 /O2"
b.create:config.cxx.std=c++11

{ config.libodb_pgsql.psql=true }+ libodb-pgsql

{
  config.odb_tests.pgsql.user=$getenv(DATABASE_USER)
  config.odb_tests.pgsql.database=$getenv(DATABASE_NAME)
  config.odb_tests.pgsql.host=$getenv(DATABASE_HOST)
  config.odb_tests.pgsql.port=$getenv(DATABASE_PORT)
}+ odb-tests

{
  config.odb_examples.pgsql.user=$getenv(DATABASE_USER)
  config.odb_examples.pgsql.database=$getenv(DATABASE_NAME)
  config.odb_examples.pgsql.host=$getenv(DATABASE_HOST)
  config.odb_examples.pgsql.port=$getenv(DATABASE_PORT)
}+ odb-examples

{
  --config-uuid=00000000-0000-0000-0000-000000000005
}+ { ?sys:libodb/* ?sys:libpq/* }
\

bindist-windows-debug-builds: bindist
bindist-windows-debug-build-include: windows*-msvc**
bindist-windows-debug-build-exclude: **
#bindist-windows-debug-build-bot: -- see below.
bindist-windows-debug-build-config:
\
+bpkg.bindist.archive:
+bbot.bindist.upload:
bpkg.bindist.archive:--recursive=full
bpkg.bindist.archive:--recursive=?libodb=separate

# Relocatable by default (see target configuration for details).
#
#bpkg.bindist.archive:config.install.relocatable=true

bpkg.bindist.archive:--archive-build-meta=+debug
bpkg.create:config.bin.lib=shared
bpkg.create:config.bin.lib.suffix=D
b.create:config.cc.coptions="/W2 /Zi /MDd"
b.create:config.cc.loptions="/DEBUG:FULL"
b.test-installed.create:config.cc.coptions="/W2 /MDd"
b.test-installed.create:config.import.libodb_pgsql.odb_pgsql.lib=odb-pgsqlD
bpkg.test-separate-installed.create:config.cc.coptions="/W2 /MDd"
bpkg.test-separate-installed.create:config.import.libodb_pgsql.odb_pgsql.lib=odb-pgsqlD
bpkg.test-separate-installed.create:config.import.libodb.odb.lib=odbD
bpkg.test-separate-installed.create:config.import.libpq.pq.lib=pqD
b.create:config.cxx.std=c++11

{
  config.odb_tests.pgsql.user=$getenv(DATABASE_USER)
  config.odb_tests.pgsql.database=$getenv(DATABASE_NAME)
  config.odb_tests.pgsql.host=$getenv(DATABASE_HOST)
  config.odb_tests.pgsql.port=$getenv(DATABASE_PORT)
}+ odb-tests

{
  config.odb_examples.pgsql.user=$getenv(DATABASE_USER)
  config.odb_examples.pgsql.database=$getenv(DATABASE_NAME)
  config.odb_examples.pgsql.host=$getenv(DATABASE_HOST)
  config.odb_examples.pgsql.port=$getenv(DATABASE_PORT)
}+ odb-examples

{
  --config-uuid=00000000-0000-0000-0000-000000000005
}+ { ?sys:libodb/* ?sys:libpq/* }
\

bindist-windows-release-build-bot:
\
-----BEGIN PUBLIC KEY-----
MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAuF4YmJmPHY52Q6N+YO0M
lt/fCovdezleb2tVplyTnvbyAiPdmYCIIjVrsqUn3y46PdFtWEiSdsrCcncoxi6H
8KelOB/oQ9pNTyEvwGKEH5ZIU7noLZYdXEfoNdvdL/pbY/7uLBZOSekfdQShZtbe
uOZCM2Mhg2DD76TP/VAwaXuDCnEvxxU/yneUl5ZaBo62AWNrYJuSGAliCOpVpl6X
X1kbHOvnCx7c9e3LxgaVivPaeZRKYg0OaFt96SBYEZzNPvjA8pMuKuj/vatHaCQ3
NO9+r3TJ+4dQd7qN6Ju3zUJq9J/ndSh4lPvUalvvhdykecefhcyHwRZOG4xyFMFE
nJM4sM+aZu6WoKATIKtk7On70inVr0sZJXwJ4Lt4oqaK2VthcSTby3wf2Yv4p5hL
zNo31cCPmBRYzABcIc6ADYvexVK4uCwaim8xs7RK5Ug2Gv6vUWoRNZW8grIgDwUY
5pZ4Zk3hW4ii2vehTaVrrmdW6XipIsT+ayiVX7eWuHHNxAeCojXVjOJu9B0ExMlD
5tHZCs+SNdV5MceexecbptB7fZtRebP120yjLiSnZ5FpaQ1stusr0hSg+VQaX4np
f5m1W/CcDr53PKWg/ayY9nWMUQaIwH4b69kLM+VTpYSbzu5UQJkmNBNq2EOHgoTv
9MLA+cE/nNJ/rMI//MZ1+kcCAwEAAQ==
-----END PUBLIC KEY-----
\

bindist-windows-debug-build-bot:
\
-----BEGIN PUBLIC KEY-----
MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAuF4YmJmPHY52Q6N+YO0M
lt/fCovdezleb2tVplyTnvbyAiPdmYCIIjVrsqUn3y46PdFtWEiSdsrCcncoxi6H
8KelOB/oQ9pNTyEvwGKEH5ZIU7noLZYdXEfoNdvdL/pbY/7uLBZOSekfdQShZtbe
uOZCM2Mhg2DD76TP/VAwaXuDCnEvxxU/yneUl5ZaBo62AWNrYJuSGAliCOpVpl6X
X1kbHOvnCx7c9e3LxgaVivPaeZRKYg0OaFt96SBYEZzNPvjA8pMuKuj/vatHaCQ3
NO9+r3TJ+4dQd7qN6Ju3zUJq9J/ndSh4lPvUalvvhdykecefhcyHwRZOG4xyFMFE
nJM4sM+aZu6WoKATIKtk7On70inVr0sZJXwJ4Lt4oqaK2VthcSTby3wf2Yv4p5hL
zNo31cCPmBRYzABcIc6ADYvexVK4uCwaim8xs7RK5Ug2Gv6vUWoRNZW8grIgDwUY
5pZ4Zk3hW4ii2vehTaVrrmdW6XipIsT+ayiVX7eWuHHNxAeCojXVjOJu9B0ExMlD
5tHZCs+SNdV5MceexecbptB7fZtRebP120yjLiSnZ5FpaQ1stusr0hSg+VQaX4np
f5m1W/CcDr53PKWg/ayY9nWMUQaIwH4b69kLM+VTpYSbzu5UQJkmNBNq2EOHgoTv
9MLA+cE/nNJ/rMI//MZ1+kcCAwEAAQ==
-----END PUBLIC KEY-----
\
