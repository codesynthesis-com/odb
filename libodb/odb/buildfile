# file      : odb/buildfile
# license   : GNU GPL v2; see accompanying LICENSE file

lib{odb}:          {hxx ixx txx cxx}{* -version}    \
                   {hxx}{version}                   \
           details/{hxx ixx txx}{*}                 \
           details/{cxx}{* -condition -lock -mutex} \
           details/{h}{*}                           \
      details/meta/{hxx}{*}                         \
details/shared-ptr/{hxx ixx txx cxx}{*}             \
     details/win32/{hxx}{windows}

# Include the generated version header into the distribution (so that we don't
# pick up an installed one) and don't remove it when cleaning in src (so that
# clean results in a state identical to distributed).
#
hxx{version}: in{version} $src_root/manifest
hxx{version}:
{
  dist  = true
  clean = ($src_root != $out_root)
}

# Build options.
#
cxx.poptions =+ "-I$out_root" "-I$src_root"

obja{*}: cxx.poptions += -DLIBODB_STATIC_BUILD
objs{*}: cxx.poptions += -DLIBODB_SHARED_BUILD

# Export options.
#
lib{odb}: cxx.export.poptions = "-I$out_root" "-I$src_root"

liba{odb}: cxx.export.poptions += -DLIBODB_STATIC
libs{odb}: cxx.export.poptions += -DLIBODB_SHARED

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{odb}: bin.lib.version = @"-$version.project_id"
else
  lib{odb}: bin.lib.version = @"-$version.major.$version.minor"

# Install into the odb/ subdirectory of, say, /usr/include/ recreating
# subdirectories.
#
install_include = [dir_path] include/odb/

{h hxx ixx txx}{*}:
{
  install         = $install_include
  install.subdirs = true
}

if ($cxx.target.class != "windows")
  details/win32/*: install = false

details/
{
  if ($cxx.target.system != 'win32-msvc')
    h{config-vc}@./: install = false
  else
    h{config}@./: install = false
}
