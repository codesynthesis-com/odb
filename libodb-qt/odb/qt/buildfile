# file      : odb/qt/buildfile
# license   : GNU GPL v2; see accompanying LICENSE file

../
{
  define options: file
  options{*}: extension = options

  # Install into the odb/qt/ subdirectory of, say, /usr/include/
  # recreating subdirectories.
  #
  {hxx ixx txx options}{*}:
  {
    install         = include/odb/
    install.subdirs = true
  }

  qt/
  {
    import int_libs = libodb%lib{odb}
    imp_libs =

    lib{odb-qt}: {hxx ixx txx cxx}{** -version} {hxx}{version} \
                 options{**} ../options{qt}                    \
                 $imp_libs $int_libs

    # Include the generated version header into the distribution (so that we
    # don't pick up an installed one) and don't remove it when cleaning in src
    # (so that clean results in a state identical to distributed).
    #
    hxx{version}: in{version} $src_root/manifest
    hxx{version}:
    {
      dist  = true
      clean = ($src_root != $out_root)
    }

    # Build options.
    #
    cxx.poptions =+ "-I$out_root" "-I$src_root"

    obja{*}: cxx.poptions += -DLIBODB_QT_STATIC_BUILD
    objs{*}: cxx.poptions += -DLIBODB_QT_SHARED_BUILD

    # Export options.
    #
    lib{odb-qt}:
    {
      cxx.export.poptions = "-I$out_root" "-I$src_root"
      cxx.export.libs = $int_libs
    }

    liba{odb-qt}: cxx.export.poptions += -DLIBODB_QT_STATIC
    libs{odb-qt}: cxx.export.poptions += -DLIBODB_QT_SHARED

    # For pre-releases use the complete version to make sure they cannot be
    # used in place of another pre-release or the final version. See the
    # version module for details on the version.* variable values.
    #
    if $version.pre_release
      lib{odb-qt}: bin.lib.version = @"-$version.project_id"
    else
      lib{odb-qt}: bin.lib.version = @"-$version.major.$version.minor"
  }
}
